<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Zyprex's Blog</title><generator uri="https://gohugo.io">Hugo</generator><link>/tags/github/</link><language>en</language><updated>Mon, 14 Jun 2021 13:11:05 CST</updated><item><title>Prove Kaprekar Constant With C Program</title><link>/2022/prove-kaprekar-constant-with-c-program/</link><pubDate>Mon, 16 May 2022 14:39:04 CST</pubDate><guid>/2022/prove-kaprekar-constant-with-c-program/</guid><description/><article>&lt;h1 id="prove-kaprekar-constant-with-c-program">Prove Kaprekar Constant with C Program&lt;sup>&lt;a class="h__anchor" href="#prove-kaprekar-constant-with-c-program">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;h2 id="know-the-kaprekar-constant">Know the kaprekar constant&lt;sup>&lt;a class="h__anchor" href="#know-the-kaprekar-constant">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>What is a kaprekar constant ?&lt;/p>
&lt;ol>
&lt;li>Given by a 4 digit integer number, for example 1000.&lt;/li>
&lt;li>Form the largest and the smallest number from it&amp;rsquo;s digits.&lt;/li>
&lt;li>Substract these two numbers and get the new integer.&lt;/li>
&lt;li>Continue with the process, until stop by number 6174.&lt;/li>
&lt;/ol>
&lt;p>The 6174 is kaprekar constant. Because use 6174 to calculate will get 6174.&lt;/p>
&lt;p>A manual calculate example:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-text" data-lang="text">1000 - 0001 = 0999
9990 - 0999 = 8991
9981 - 1899 = 8082
8820 - 0288 = 8532
8532 - 2358 = 6174
7641 - 1467 = 6174
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>All 4 digit integer numbers have the same pitfall loop end.&lt;/p>
&lt;p>Let&amp;rsquo;s use c program to prove it.&lt;/p>
&lt;h2 id="draw-sketch">Draw Sketch&lt;sup>&lt;a class="h__anchor" href="#draw-sketch">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;ol>
&lt;li>Decide how to pass parameter&lt;/li>
&lt;/ol>
&lt;p>Pass integer is intuitive, but in this case I use string , because reform digit
generated a char array, and with string parameter, test in terminal with bash
script more convient.&lt;/p>
&lt;ol start="2">
&lt;li>Overview of plan&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>convert strings to a char array.&lt;/li>
&lt;li>sort char array descend.&lt;/li>
&lt;li>calculate loop until 6174.&lt;/li>
&lt;/ul>
&lt;h2 id="jump-into-detail">Jump into Detail&lt;sup>&lt;a class="h__anchor" href="#jump-into-detail">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;ol>
&lt;li>convert strings to a char array.&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">num_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_len&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="2">
&lt;li>sort char array descend&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">sort_char_array_descend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">idx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">idx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">idx&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;ol start="3">
&lt;li>calculate loop to end&lt;/li>
&lt;/ol>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;span class="lnt">24
&lt;/span>&lt;span class="lnt">25
&lt;/span>&lt;span class="lnt">26
&lt;/span>&lt;span class="lnt">27
&lt;/span>&lt;span class="lnt">28
&lt;/span>&lt;span class="lnt">29
&lt;/span>&lt;span class="lnt">30
&lt;/span>&lt;span class="lnt">31
&lt;/span>&lt;span class="lnt">32
&lt;/span>&lt;span class="lnt">33
&lt;/span>&lt;span class="lnt">34
&lt;/span>&lt;span class="lnt">35
&lt;/span>&lt;span class="lnt">36
&lt;/span>&lt;span class="lnt">37
&lt;/span>&lt;span class="lnt">38
&lt;/span>&lt;span class="lnt">39
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">calc_kaprekar_constant&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">num_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_len&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">times&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">origin_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_len&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">origin_num&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">times&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">step_count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sort_char_array_descend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/* max digital */&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_len&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">n1&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">times&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cm">/* min digital */&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">n2&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">times&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">next_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">n2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DEBUG&lt;/span>&lt;span class="err">$&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d-%d=%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_num&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">next_num&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">origin_num&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">next_num&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">DEBUG&lt;/span>&lt;span class="err">$&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d (jump into black hole after step %d)&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step_count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">origin_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next_num&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">step_count&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">int_to_char_arr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">next_num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="small-tips-for-debug-print">Small Tips for Debug Print&lt;sup>&lt;a class="h__anchor" href="#small-tips-for-debug-print">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define DEBUG &lt;/span>&lt;span class="cm">/* comment this line to remove all debug code sentence */&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#ifdef DEBUG
&lt;/span>&lt;span class="cp">#define DEBUG$
&lt;/span>&lt;span class="cp">#else
&lt;/span>&lt;span class="cp">#define DEBUG$ for (;0;)
&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="handle-other-case">Handle Other Case&lt;sup>&lt;a class="h__anchor" href="#handle-other-case">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>Prove other than 4-digits integer may cause infinite loop, so use a link
list avoid those case. The link list save each steps result, when a calculate
done, check whether it is in previous&amp;rsquo;s results list.&lt;/p>
&lt;h2 id="complete-program">Complete Program&lt;sup>&lt;a class="h__anchor" href="#complete-program">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>In this program, you can define different macro to run differnt test case.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt"> 10
&lt;/span>&lt;span class="lnt"> 11
&lt;/span>&lt;span class="lnt"> 12
&lt;/span>&lt;span class="lnt"> 13
&lt;/span>&lt;span class="lnt"> 14
&lt;/span>&lt;span class="lnt"> 15
&lt;/span>&lt;span class="lnt"> 16
&lt;/span>&lt;span class="lnt"> 17
&lt;/span>&lt;span class="lnt"> 18
&lt;/span>&lt;span class="lnt"> 19
&lt;/span>&lt;span class="lnt"> 20
&lt;/span>&lt;span class="lnt"> 21
&lt;/span>&lt;span class="lnt"> 22
&lt;/span>&lt;span class="lnt"> 23
&lt;/span>&lt;span class="lnt"> 24
&lt;/span>&lt;span class="lnt"> 25
&lt;/span>&lt;span class="lnt"> 26
&lt;/span>&lt;span class="lnt"> 27
&lt;/span>&lt;span class="lnt"> 28
&lt;/span>&lt;span class="lnt"> 29
&lt;/span>&lt;span class="lnt"> 30
&lt;/span>&lt;span class="lnt"> 31
&lt;/span>&lt;span class="lnt"> 32
&lt;/span>&lt;span class="lnt"> 33
&lt;/span>&lt;span class="lnt"> 34
&lt;/span>&lt;span class="lnt"> 35
&lt;/span>&lt;span class="lnt"> 36
&lt;/span>&lt;span class="lnt"> 37
&lt;/span>&lt;span class="lnt"> 38
&lt;/span>&lt;span class="lnt"> 39
&lt;/span>&lt;span class="lnt"> 40
&lt;/span>&lt;span class="lnt"> 41
&lt;/span>&lt;span class="lnt"> 42
&lt;/span>&lt;span class="lnt"> 43
&lt;/span>&lt;span class="lnt"> 44
&lt;/span>&lt;span class="lnt"> 45
&lt;/span>&lt;span class="lnt"> 46
&lt;/span>&lt;span class="lnt"> 47
&lt;/span>&lt;span class="lnt"> 48
&lt;/span>&lt;span class="lnt"> 49
&lt;/span>&lt;span class="lnt"> 50
&lt;/span>&lt;span class="lnt"> 51
&lt;/span>&lt;span class="lnt"> 52
&lt;/span>&lt;span class="lnt"> 53
&lt;/span>&lt;span class="lnt"> 54
&lt;/span>&lt;span class="lnt"> 55
&lt;/span>&lt;span class="lnt"> 56
&lt;/span>&lt;span class="lnt"> 57
&lt;/span>&lt;span class="lnt"> 58
&lt;/span>&lt;span class="lnt"> 59
&lt;/span>&lt;span class="lnt"> 60
&lt;/span>&lt;span class="lnt"> 61
&lt;/span>&lt;span class="lnt"> 62
&lt;/span>&lt;span class="lnt"> 63
&lt;/span>&lt;span class="lnt"> 64
&lt;/span>&lt;span class="lnt"> 65
&lt;/span>&lt;span class="lnt"> 66
&lt;/span>&lt;span class="lnt"> 67
&lt;/span>&lt;span class="lnt"> 68
&lt;/span>&lt;span class="lnt"> 69
&lt;/span>&lt;span class="lnt"> 70
&lt;/span>&lt;span class="lnt"> 71
&lt;/span>&lt;span class="lnt"> 72
&lt;/span>&lt;span class="lnt"> 73
&lt;/span>&lt;span class="lnt"> 74
&lt;/span>&lt;span class="lnt"> 75
&lt;/span>&lt;span class="lnt"> 76
&lt;/span>&lt;span class="lnt"> 77
&lt;/span>&lt;span class="lnt"> 78
&lt;/span>&lt;span class="lnt"> 79
&lt;/span>&lt;span class="lnt"> 80
&lt;/span>&lt;span class="lnt"> 81
&lt;/span>&lt;span class="lnt"> 82
&lt;/span>&lt;span class="lnt"> 83
&lt;/span>&lt;span class="lnt"> 84
&lt;/span>&lt;span class="lnt"> 85
&lt;/span>&lt;span class="lnt"> 86
&lt;/span>&lt;span class="lnt"> 87
&lt;/span>&lt;span class="lnt"> 88
&lt;/span>&lt;span class="lnt"> 89
&lt;/span>&lt;span class="lnt"> 90
&lt;/span>&lt;span class="lnt"> 91
&lt;/span>&lt;span class="lnt"> 92
&lt;/span>&lt;span class="lnt"> 93
&lt;/span>&lt;span class="lnt"> 94
&lt;/span>&lt;span class="lnt"> 95
&lt;/span>&lt;span class="lnt"> 96
&lt;/span>&lt;span class="lnt"> 97
&lt;/span>&lt;span class="lnt"> 98
&lt;/span>&lt;span class="lnt"> 99
&lt;/span>&lt;span class="lnt">100
&lt;/span>&lt;span class="lnt">101
&lt;/span>&lt;span class="lnt">102
&lt;/span>&lt;span class="lnt">103
&lt;/span>&lt;span class="lnt">104
&lt;/span>&lt;span class="lnt">105
&lt;/span>&lt;span class="lnt">106
&lt;/span>&lt;span class="lnt">107
&lt;/span>&lt;span class="lnt">108
&lt;/span>&lt;span class="lnt">109
&lt;/span>&lt;span class="lnt">110
&lt;/span>&lt;span class="lnt">111
&lt;/span>&lt;span class="lnt">112
&lt;/span>&lt;span class="lnt">113
&lt;/span>&lt;span class="lnt">114
&lt;/span>&lt;span class="lnt">115
&lt;/span>&lt;span class="lnt">116
&lt;/span>&lt;span class="lnt">117
&lt;/span>&lt;span class="lnt">118
&lt;/span>&lt;span class="lnt">119
&lt;/span>&lt;span class="lnt">120
&lt;/span>&lt;span class="lnt">121
&lt;/span>&lt;span class="lnt">122
&lt;/span>&lt;span class="lnt">123
&lt;/span>&lt;span class="lnt">124
&lt;/span>&lt;span class="lnt">125
&lt;/span>&lt;span class="lnt">126
&lt;/span>&lt;span class="lnt">127
&lt;/span>&lt;span class="lnt">128
&lt;/span>&lt;span class="lnt">129
&lt;/span>&lt;span class="lnt">130
&lt;/span>&lt;span class="lnt">131
&lt;/span>&lt;span class="lnt">132
&lt;/span>&lt;span class="lnt">133
&lt;/span>&lt;span class="lnt">134
&lt;/span>&lt;span class="lnt">135
&lt;/span>&lt;span class="lnt">136
&lt;/span>&lt;span class="lnt">137
&lt;/span>&lt;span class="lnt">138
&lt;/span>&lt;span class="lnt">139
&lt;/span>&lt;span class="lnt">140
&lt;/span>&lt;span class="lnt">141
&lt;/span>&lt;span class="lnt">142
&lt;/span>&lt;span class="lnt">143
&lt;/span>&lt;span class="lnt">144
&lt;/span>&lt;span class="lnt">145
&lt;/span>&lt;span class="lnt">146
&lt;/span>&lt;span class="lnt">147
&lt;/span>&lt;span class="lnt">148
&lt;/span>&lt;span class="lnt">149
&lt;/span>&lt;span class="lnt">150
&lt;/span>&lt;span class="lnt">151
&lt;/span>&lt;span class="lnt">152
&lt;/span>&lt;span class="lnt">153
&lt;/span>&lt;span class="lnt">154
&lt;/span>&lt;span class="lnt">155
&lt;/span>&lt;span class="lnt">156
&lt;/span>&lt;span class="lnt">157
&lt;/span>&lt;span class="lnt">158
&lt;/span>&lt;span class="lnt">159
&lt;/span>&lt;span class="lnt">160
&lt;/span>&lt;span class="lnt">161
&lt;/span>&lt;span class="lnt">162
&lt;/span>&lt;span class="lnt">163
&lt;/span>&lt;span class="lnt">164
&lt;/span>&lt;span class="lnt">165
&lt;/span>&lt;span class="lnt">166
&lt;/span>&lt;span class="lnt">167
&lt;/span>&lt;span class="lnt">168
&lt;/span>&lt;span class="lnt">169
&lt;/span>&lt;span class="lnt">170
&lt;/span>&lt;span class="lnt">171
&lt;/span>&lt;span class="lnt">172
&lt;/span>&lt;span class="lnt">173
&lt;/span>&lt;span class="lnt">174
&lt;/span>&lt;span class="lnt">175
&lt;/span>&lt;span class="lnt">176
&lt;/span>&lt;span class="lnt">177
&lt;/span>&lt;span class="lnt">178
&lt;/span>&lt;span class="lnt">179
&lt;/span>&lt;span class="lnt">180
&lt;/span>&lt;span class="lnt">181
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdio.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;stdlib.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;string.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;strings.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#define DEBUG &lt;/span>&lt;span class="cm">/* comment this line to remove all debug code sentence */&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">#ifdef DEBUG
&lt;/span>&lt;span class="cp">#define DEBUG$
&lt;/span>&lt;span class="cp">#else
&lt;/span>&lt;span class="cp">#define DEBUG$ for (; 0;)
&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;span class="cp">&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">};&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">init_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">insert_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;insert failed&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">new_node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="n">new_node&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">new_node&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">node&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">new_node&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">print_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;print failed&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">cur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d &amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">data&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">search_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">cur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">node&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">pos&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">data&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">data&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">pos&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">cur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">pos&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">clean_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">**&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">node&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;del failed.&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">return&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">cur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">cur&lt;/span>&lt;span class="o">-&amp;gt;&lt;/span>&lt;span class="n">next&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">cur&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">cur&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="o">*&lt;/span>&lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">sort_char_array_descend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">len&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">idx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">idx&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">idx&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">temp&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">];&lt;/span>
&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">idx&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">temp&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">void&lt;/span> &lt;span class="nf">int_to_char_arr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">n&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">[],&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">bzero&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n&lt;/span> &lt;span class="o">&amp;gt;&lt;/span> &lt;span class="mi">0&lt;/span> &lt;span class="o">&amp;amp;&amp;amp;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">len&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="n">digit&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n&lt;/span> &lt;span class="o">%&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">num&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">len&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">digit&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">n&lt;/span> &lt;span class="o">/=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">calc_kaprekar_constant&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">j&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">idx&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">unsigned&lt;/span> &lt;span class="kt">long&lt;/span> &lt;span class="n">num_len&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">strlen&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="p">)&lt;/span>&lt;span class="n">malloc&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">num_len&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="k">sizeof&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">char&lt;/span>&lt;span class="p">));&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="sc">&amp;#39;0&amp;#39;&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">times&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">origin_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_len&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">origin_num&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">times&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="n">step_count&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">init_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">do&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">sort_char_array_descend&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/* max digital */&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">num_len&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">--&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">n1&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">times&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cm">/* min digital */&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">n2&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="n">num_len&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">times&lt;/span> &lt;span class="o">*=&lt;/span> &lt;span class="mi">10&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">n2&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">times&lt;/span> &lt;span class="o">*&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">next_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">n1&lt;/span> &lt;span class="o">-&lt;/span> &lt;span class="n">n2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">DEBUG&lt;/span>&lt;span class="err">$&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d-%d=%d&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">n2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_num&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">next_num&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="n">origin_num&lt;/span> &lt;span class="o">||&lt;/span> &lt;span class="n">next_num&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">DEBUG&lt;/span>&lt;span class="err">$&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d (jump into black hole after step %d)&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step_count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">clean_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">search_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_num&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">!=&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">DEBUG&lt;/span>&lt;span class="err">$&lt;/span> &lt;span class="n">print_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">DEBUG&lt;/span>&lt;span class="err">$&lt;/span> &lt;span class="n">printf&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;%d (infinit loop after %d step)&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s">&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">next_num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">step_count&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">clean_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">ret&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">break&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="n">origin_num&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="n">next_num&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">insert_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">origin_num&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">step_count&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">int_to_char_arr&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">next_num&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">arr&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">num_len&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="p">}&lt;/span> &lt;span class="k">while&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">free&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">arr&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">arr&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">ret&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">argc&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="kt">char&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[])&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="cm">/* #define TEST_NODE */&lt;/span>
&lt;span class="cm">/* #define TEST_PRE */&lt;/span>
&lt;span class="cp">#ifdef TEST_NODE
&lt;/span>&lt;span class="cp">&lt;/span> &lt;span class="k">struct&lt;/span> &lt;span class="n">node&lt;/span> &lt;span class="o">*&lt;/span>&lt;span class="n">node&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="nb">NULL&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="n">init_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="o">-&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">insert_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">insert_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">insert_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">3&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">print_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="n">clean_node&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">&amp;amp;&lt;/span>&lt;span class="n">node&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cp">#elif defined(TEST_PRE)
&lt;/span>&lt;span class="cp">&lt;/span> &lt;span class="n">calc_kaprekar_constant&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s">&amp;#34;13&amp;#34;&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cm">/* 31-13=18 */&lt;/span>
&lt;span class="cm">/* 81-18=63 */&lt;/span>
&lt;span class="cm">/* 63-36=27 */&lt;/span>
&lt;span class="cm">/* 72-27=45 */&lt;/span>
&lt;span class="cm">/* 54-45=9 */&lt;/span>
&lt;span class="cm">/* 90-9=81 */&lt;/span>
&lt;span class="cm">/* 81-18=63 */&lt;/span> &lt;span class="cm">/* &amp;lt;- went to 63 again */&lt;/span>
&lt;span class="cp">#else
&lt;/span>&lt;span class="cp">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">argc&lt;/span> &lt;span class="o">&amp;gt;=&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="n">calc_kaprekar_constant&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">argv&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="mi">1&lt;/span>&lt;span class="p">]);&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="cp">#endif
&lt;/span>&lt;span class="cp">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="test-with-a-bash-script">Test with a Bash Script&lt;sup>&lt;a class="h__anchor" href="#test-with-a-bash-script">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-bash" data-lang="bash">&lt;span class="k">for&lt;/span> num in &lt;span class="k">$(&lt;/span>seq &lt;span class="nv">$1&lt;/span> &lt;span class="nv">$2&lt;/span>&lt;span class="k">)&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">do&lt;/span>
./kaprekar_constant &lt;span class="nv">$num&lt;/span> &amp;gt;/dev/null
&lt;span class="k">if&lt;/span> &lt;span class="o">[&lt;/span> &lt;span class="nv">$?&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">2&lt;/span> &lt;span class="o">]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="nb">echo&lt;/span> &lt;span class="s2">&amp;#34;some number went to infinite loop&amp;#34;&lt;/span>
&lt;span class="nb">exit&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="k">done&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>Usage: execute &lt;code>./kaprekar_constant_test.sh 1000 9999&lt;/code>, if successful, will output nothing.&lt;/p>
&lt;h1 id="ref">Ref.&lt;sup>&lt;a class="h__anchor" href="#ref">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>&lt;a class="md__link" href="https://newbedev.com/define-macro-for-debug-printing-in-c"
target="_blank" rel="noopener"
>
debug-pringing-in-c
↗
&lt;/a>
&lt;/p></article></item><item><title>Dont Conform to the Norm</title><link>/2022/dont-conform-to-the-norm/</link><pubDate>Sun, 15 May 2022 18:29:01 CST</pubDate><guid>/2022/dont-conform-to-the-norm/</guid><description/><article>&lt;h1 id="dont-conform-to-the-norm">Don&amp;rsquo;t Conform To The Norm&lt;sup>&lt;a class="h__anchor" href="#dont-conform-to-the-norm">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>Three concepts that lead you to conform to the norm.&lt;/p>
&lt;ol>
&lt;li>the individuation.&lt;/li>
&lt;li>the inaction of others.&lt;/li>
&lt;li>the scarcity principle.&lt;/li>
&lt;/ol>
&lt;h2 id="the-individuation">The Individuation&lt;sup>&lt;a class="h__anchor" href="#the-individuation">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>A person seeing themselves as a part of the bigger society or culture can
increase their levels, but this can obscure moral elements.&lt;/p>
&lt;h2 id="the-inaction-of-others">The Inaction of Others&lt;sup>&lt;a class="h__anchor" href="#the-inaction-of-others">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>If other&amp;rsquo;s don&amp;rsquo;t judged your immoral behavior, then it&amp;rsquo;s more likely to occur.&lt;/p>
&lt;h2 id="the-scarcity-principle">The Scarcity Principle&lt;sup>&lt;a class="h__anchor" href="#the-scarcity-principle">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>People tend to place less value on objects or opportunities that are in
abundance rather than those that are rare. But does those rare fitter more ?&lt;/p></article></item><item><title>Android Misc Debug</title><link>/2022/android-misc-debug/</link><pubDate>Mon, 18 Apr 2022 20:18:24 CST</pubDate><guid>/2022/android-misc-debug/</guid><description/><article>&lt;h1 id="app-crashed-when-use-androidthemeandroidstylethemedialog">App Crashed When use &lt;code>android:theme=&amp;quot;@android:style/Theme.Dialog&amp;quot;&lt;/code>&lt;sup>&lt;a class="h__anchor" href="#app-crashed-when-use-androidthemeandroidstylethemedialog">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>For Android Studio set android theme, in AndroidManifest.xml, correct the
&lt;code>android:theme&lt;/code> value:&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-xml" data-lang="xml">&lt;span class="nt">&amp;lt;activity&lt;/span>
&lt;span class="na">android:name=&lt;/span>&lt;span class="s">&amp;#34;.DialogActivity&amp;#34;&lt;/span>
&lt;span class="na">android:theme=&lt;/span>&lt;span class="s">&amp;#34;@style/Theme.AppCompat.Dialog&amp;#34;&lt;/span>
&lt;span class="na">android:exported=&lt;/span>&lt;span class="s">&amp;#34;false&amp;#34;&lt;/span>&lt;span class="nt">/&amp;gt;&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="comandroidsupportpercent-with-androidx">&amp;lsquo;com.android.support.percent&amp;rsquo; with AndroidX&lt;sup>&lt;a class="h__anchor" href="#comandroidsupportpercent-with-androidx">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>The new &lt;code>androidx&lt;/code> standard didn&amp;rsquo;t compatible with old &lt;code>support&lt;/code> packcage.&lt;/p>
&lt;p>&lt;a class="md__link" href="https://blog.csdn.net/qq_21331159/article/details/114024546"
target="_blank" rel="noopener"
>
无法导入‘com.android.support.percent‘(百分比布局依赖库)的解决方法
↗
&lt;/a>
&lt;/p>
&lt;h1 id="getadapterposition-always-return--1">&amp;lsquo;getAdapterPosition&amp;rsquo; always return -1&lt;sup>&lt;a class="h__anchor" href="#getadapterposition-always-return--1">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>Move it into &lt;code>onBindViewHolder&lt;/code> function.&lt;/p>
&lt;h1 id="add-local-dependencies">Add Local Dependencies&lt;sup>&lt;a class="h__anchor" href="#add-local-dependencies">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;pre>&lt;code>dependencies {
implementation fileTree(dir: 'libs', includes: ['*.jar'])
}
&lt;/code>&lt;/pre>&lt;p>File-&amp;gt;Invalidate Caches-&amp;gt;Invalidate and Restart&lt;/p>
&lt;h1 id="on-building-apk">On building APK&lt;sup>&lt;a class="h__anchor" href="#on-building-apk">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;blockquote>
&lt;p>Generate Signed APK: Errors while building APK. You can find the errors in the &amp;lsquo;Messages&amp;rsquo; view.&lt;/p>
&lt;/blockquote>
&lt;p>Enlarge jvm max heap to 256m (I origin set it to 128m)&lt;/p>
&lt;blockquote>
&lt;p>org.gradle.jvmargs=-Xmx256m -Dfile.encoding=UTF-8&lt;/p>
&lt;/blockquote></article></item><item><title>Install Android Studio</title><link>/2022/install-android-studio/</link><pubDate>Thu, 10 Mar 2022 17:35:43 CST</pubDate><guid>/2022/install-android-studio/</guid><description/><article>&lt;h1 id="take-care-of-my-low-memory-machine">Take Care of My Low Memory Machine&lt;sup>&lt;a class="h__anchor" href="#take-care-of-my-low-memory-machine">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;ul>
&lt;li>Enable Power Save Mode&lt;/li>
&lt;li>Reduce maximum heap size to 512m&lt;/li>
&lt;li>Disable parallel compilation&lt;/li>
&lt;li>Disable unnecessary lint checks (File&amp;gt;Settings&amp;gt;Editor)&lt;/li>
&lt;li>Reduce maximum heap size available for Gradle. (the &lt;code>org.gradle.jvmargs&lt;/code> in
&lt;code>gradle.properites&lt;/code> is located at project root folder, set it to 128m)&lt;/li>
&lt;li>Debug on a physical device&lt;/li>
&lt;/ul>
&lt;h1 id="fix-up-avd-related-problem">Fix up AVD related problem&lt;sup>&lt;a class="h__anchor" href="#fix-up-avd-related-problem">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>(1) Add system path&lt;/p>
&lt;blockquote>
&lt;p>PANIC: Cannot find AVD system path. Please define &lt;code>ANDROID_SDK_ROOT&lt;/code>.&lt;/p>
&lt;/blockquote>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-shell" data-lang="shell">&lt;span class="c1"># ~/.profile or ~/.zshenv&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">ANDROID_SDK_ROOT&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$HOME&lt;/span>/Android/Sdk
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;p>(2) Configure BIOS&lt;/p>
&lt;blockquote>
&lt;p>VT-x is disabled in BIOS.&lt;/p>
&lt;/blockquote>
&lt;p>Enable &lt;code>Intel Virtual Technology&lt;/code> in BIOS.&lt;/p>
&lt;p>&lt;strong>Sadly to say&lt;/strong>: although AVD successful launched, it&amp;rsquo;s performance is
really bad in low memory machine :(.&lt;/p></article></item><item><title>Try SDCC on Linux</title><link>/2022/try-sdcc-on-linux/</link><pubDate>Thu, 03 Mar 2022 11:57:17 CST</pubDate><guid>/2022/try-sdcc-on-linux/</guid><description/><article>&lt;h1 id="why-try-sdcc-on-linux">Why try SDCC on linux&lt;sup>&lt;a class="h__anchor" href="#why-try-sdcc-on-linux">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>I try sdcc on linux because I think I could spark off my interst in mcu programming again. The facts are just the opposite, I found all intersting lost to somewhere unconsciously. So I end it by collect old material thoungh I don&amp;rsquo;t think it can help for anybody. Just a record.&lt;/p>
&lt;h1 id="getting-start">Getting Start&lt;sup>&lt;a class="h__anchor" href="#getting-start">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>mcu: STC90C52RC&lt;/p>
&lt;p>compiler: SDCC&lt;/p>
&lt;p>platform: linux&lt;/p>
&lt;h1 id="prerequisites">Prerequisites&lt;sup>&lt;a class="h__anchor" href="#prerequisites">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;ul>
&lt;li>&lt;a class="md__link" href="http://sdcc.sourceforge.net/index.php#Download"
target="_blank" rel="noopener"
>
sdcc
↗
&lt;/a>
&lt;/li>
&lt;li>&lt;a class="md__link" href="https://github.com/grigorig/stcgal"
target="_blank" rel="noopener"
>
stcgal
↗
&lt;/a>
&lt;ul>
&lt;li>pip3 install stcgal&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h1 id="step-by-step">Step By Step&lt;sup>&lt;a class="h__anchor" href="#step-by-step">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>Compile sdcc from source:&lt;/p>
&lt;pre>&lt;code>cd sdcc
./configure
&lt;/code>&lt;/pre>&lt;p>configure: error: boost library not found (boost/graph/adjacency_list.hpp).&lt;/p>
&lt;pre>&lt;code>sudo pacman -S boost
&lt;/code>&lt;/pre>&lt;p>configure: error: gputils (gpasm, gplink, and gplib) are required but not found.
Either install gputils or reconfigure with &amp;ndash;disable-pic14-port and &amp;ndash;disable-pic16-port.
configure: error: ./configure failed for device/lib/pic14&lt;/p>
&lt;pre>&lt;code>sudo pacman -S gputils
&lt;/code>&lt;/pre>&lt;pre>&lt;code>./configure
make
&lt;/code>&lt;/pre>&lt;p>wait at least 45 minutes&lt;/p>
&lt;pre>&lt;code>sudo make install
&lt;/code>&lt;/pre>&lt;!-- According to `sdccman.pdf` 2.2 install path -->
&lt;p>Test sdcc compiler with &lt;code>sdcc --version&lt;/code>
You may see:&lt;/p>
&lt;pre>&lt;code>SDCC : mcs51/z80/z180/r2k/r2ka/r3ka/gbz80/tlcs90/ez80_z80/z80n/ds390/pic16/pic14/TININative/ds400/hc08/s08/stm8/pdk13/pdk14/pdk15 4.1.0 #12072 (Linux)
published under GNU General Public License (GPL)
&lt;/code>&lt;/pre>&lt;h1 id="generate-binary-file">Generate Binary File&lt;sup>&lt;a class="h__anchor" href="#generate-binary-file">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;pre>&lt;code>sdcc main.c
packihx main.ihx
xxd -r -p main.hex main.bin
&lt;/code>&lt;/pre>&lt;h1 id="download-binary-file-to-flash">Download Binary File to Flash&lt;sup>&lt;a class="h__anchor" href="#download-binary-file-to-flash">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>If occur &amp;ldquo;ModuleNotFoundError: No module named &amp;lsquo;stcgal&amp;rsquo;&amp;rdquo;, try, (another way is install &amp;lsquo;stcgal&amp;rsquo; for root user):&lt;/p>
&lt;pre>&lt;code>chown &amp;lt;username&amp;gt; /dev/ttyUSB0
&lt;/code>&lt;/pre>&lt;p>When stuck on &amp;lsquo;Waiting for MCU, please cycle power:&amp;rsquo;, maybe you are use chip does not support by stcgal.&lt;/p>
&lt;pre>&lt;code>stcgal -P stc89 -p /dev/ttyUSB0 main.bin
&lt;/code>&lt;/pre>&lt;h1 id="test-code">Test code&lt;sup>&lt;a class="h__anchor" href="#test-code">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;h2 id="mainc">main.c&lt;sup>&lt;a class="h__anchor" href="#mainc">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#include&lt;/span> &lt;span class="cpf">&amp;lt;mcs51/8051.h&amp;gt;&lt;/span>&lt;span class="cp">
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="kt">void&lt;/span> &lt;span class="nf">delay&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">100&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="kt">int&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="n">j&lt;/span> &lt;span class="o">&amp;lt;&lt;/span> &lt;span class="mi">1000&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="o">++&lt;/span>&lt;span class="n">j&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="kt">int&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="kt">void&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">P1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="mh">0xAF&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="k">for&lt;/span> &lt;span class="p">(;;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;span class="n">delay&lt;/span>&lt;span class="p">();&lt;/span>
&lt;span class="n">P1&lt;/span> &lt;span class="o">=&lt;/span> &lt;span class="o">~&lt;/span>&lt;span class="n">P1&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="mi">0&lt;/span>&lt;span class="p">;&lt;/span>
&lt;span class="p">}&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h2 id="makefile">makefile&lt;sup>&lt;a class="h__anchor" href="#makefile">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;span class="lnt">18
&lt;/span>&lt;span class="lnt">19
&lt;/span>&lt;span class="lnt">20
&lt;/span>&lt;span class="lnt">21
&lt;/span>&lt;span class="lnt">22
&lt;/span>&lt;span class="lnt">23
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-make" data-lang="make">&lt;span class="c"># LAST MODIFIED : March 23, 2021
&lt;/span>&lt;span class="c"># MAKE PROGRAM : make
&lt;/span>&lt;span class="c"># PLATFORM : unix
&lt;/span>&lt;span class="c"># DESCRIPTION : this makefile is used to compile mcs51 program
&lt;/span>&lt;span class="c"># -I/usr/local/share/sdcc/include/
&lt;/span>&lt;span class="c">&lt;/span>&lt;span class="nv">CC&lt;/span> &lt;span class="o">:=&lt;/span> sdcc
&lt;span class="nv">FLAGS&lt;/span> &lt;span class="o">:=&lt;/span>
&lt;span class="nv">RM&lt;/span> &lt;span class="o">:=&lt;/span> rm
&lt;span class="nv">MAIN&lt;/span> &lt;span class="o">:=&lt;/span> main
&lt;span class="nv">REL&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">$(&lt;/span>patsubst %.c, %.rel, &lt;span class="k">$(&lt;/span>filter-out &lt;span class="k">$(&lt;/span>MAIN&lt;span class="k">)&lt;/span>.c, &lt;span class="k">$(&lt;/span>wildcard *.c&lt;span class="k">)))&lt;/span>
&lt;span class="nv">DUMP&lt;/span> &lt;span class="o">:=&lt;/span> &lt;span class="k">$(&lt;/span>wildcard *.asm *.lst *.rst *.sym *.map *.mem *.lk *.hex *.ihx *.rel&lt;span class="k">)&lt;/span>
&lt;span class="nf">all&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="k">$(&lt;/span>&lt;span class="nv">REL&lt;/span>&lt;span class="k">)&lt;/span>
&lt;span class="k">$(&lt;/span>CC&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>MAIN&lt;span class="k">)&lt;/span>.c $^
packihx &lt;span class="k">$(&lt;/span>MAIN&lt;span class="k">)&lt;/span>.ihx &amp;gt; &lt;span class="k">$(&lt;/span>MAIN&lt;span class="k">)&lt;/span>.hex
xxd -r -p &lt;span class="k">$(&lt;/span>MAIN&lt;span class="k">)&lt;/span>.hex &lt;span class="k">$(&lt;/span>MAIN&lt;span class="k">)&lt;/span>.bin
&lt;span class="nf">%.rel&lt;/span>&lt;span class="o">:&lt;/span> %.&lt;span class="n">c&lt;/span>
&lt;span class="k">$(&lt;/span>CC&lt;span class="k">)&lt;/span> -c $&amp;lt;
&lt;span class="nf">.PHONY&lt;/span>&lt;span class="o">:&lt;/span> &lt;span class="n">clean&lt;/span>
&lt;span class="nf">clean&lt;/span>&lt;span class="o">:&lt;/span>
&lt;span class="k">$(&lt;/span>RM&lt;span class="k">)&lt;/span> &lt;span class="k">$(&lt;/span>DUMP&lt;span class="k">)&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div></article></item><item><title>Connect Internet From Command Line</title><link>/2021/connect-internet-from-command-line/</link><pubDate>Tue, 24 Aug 2021 11:38:54 CST</pubDate><guid>/2021/connect-internet-from-command-line/</guid><description/><article>&lt;h1 id="connect-internet-from-command-line">Connect Internet From Command Line&lt;sup>&lt;a class="h__anchor" href="#connect-internet-from-command-line">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>The &lt;code>&amp;lt;SSID&amp;gt;&lt;/code> is your wifi name.&lt;/p>
&lt;h2 id="on-windows">On Windows&lt;sup>&lt;a class="h__anchor" href="#on-windows">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>Connect to WIFI: &lt;code>netsh wlan connect name=&amp;lt;SSID&amp;gt;&lt;/code>&lt;/p>
&lt;p>Disconnect to WIFI: &lt;code>netsh wlan disconnect&lt;/code>&lt;/p>
&lt;h2 id="on-linux">On Linux&lt;sup>&lt;a class="h__anchor" href="#on-linux">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>Check WIFI status: &lt;code>nmcli radio wifi&lt;/code>, it should output &lt;code>enabled&lt;/code>,
or else you will need run &lt;code>nmcli radio wifi on&lt;/code>.&lt;/p>
&lt;p>Check Network status: &lt;code>nmcli d status&lt;/code>, &lt;code>nmcli c show&lt;/code>&lt;/p>
&lt;p>List WIFI SSID: &lt;code>mncli d wifi list&lt;/code> , &lt;code>mncli d wifi rescan&lt;/code>&lt;/p>
&lt;p>Delete a WIFI: &lt;code>nmcli c delete &amp;lt;SSID&amp;gt;&lt;/code>, &lt;code>nmcli c delete &amp;lt;UUID&amp;gt;&lt;/code>&lt;/p>
&lt;p>Connect to new WIFI: &lt;code>nmcli d wifi connect &amp;quot;&amp;lt;SSID&amp;gt;&amp;quot; --ask&lt;/code>&lt;/p>
&lt;p>Connect to hidden WIFI: &lt;code>nmcli d wifi connect &amp;quot;&amp;lt;SSID&amp;gt;&amp;quot; hidden yes --ask&lt;/code>&lt;/p>
&lt;p>Connect to WIFI: &lt;code>nmcli c up &amp;lt;SSID&amp;gt;&lt;/code>, or &lt;code>nmcli c up&lt;/code>&lt;/p>
&lt;p>Disconnect to WIFI: &lt;code>nmcli c down &amp;lt;SSID&amp;gt;&lt;/code>, or &lt;code>nmcli c down&lt;/code>&lt;/p></article></item><item><title>Use Macros in C</title><link>/2021/use-macros-in-c/</link><pubDate>Sat, 17 Jul 2021 11:48:59 CST</pubDate><guid>/2021/use-macros-in-c/</guid><description/><article>&lt;h1 id="use-macros-in-c">Use Macros in C&lt;sup>&lt;a class="h__anchor" href="#use-macros-in-c">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>Macros in C programming language, are notorious for it&amp;rsquo;s extremely unsafe,
esoterically hard to debug.&lt;/p>
&lt;p>Thus, we should strived to understand its pros and cons.&lt;/p>
&lt;h2 id="feature-of-macros">Feature of Macros&lt;sup>&lt;a class="h__anchor" href="#feature-of-macros">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>In C, macro&amp;rsquo;s main duty is &lt;em>text precessing&lt;/em> &amp;ndash; e.g. replace a piece of text
with another text, in many other case, they&amp;rsquo;re used to encapsulated function,
and in minor case, they can minic some other language&amp;rsquo;s feature, or syntactic
sugar.&lt;/p>
&lt;h2 id="expansion-of-macros">Expansion of Macros&lt;sup>&lt;a class="h__anchor" href="#expansion-of-macros">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>Do expansion of macros use &lt;code>gcc&lt;/code> with &lt;code>-E [file]&lt;/code> option.&lt;/p>
&lt;h2 id="comparison-of-macros-pros-and-cons">Comparison of Macros Pros and Cons&lt;sup>&lt;a class="h__anchor" href="#comparison-of-macros-pros-and-cons">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>&lt;strong>CONS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>The variable defined in macro share same scope near to its used place.&lt;/li>
&lt;li>No type checking with macros parameters as functions parameters.&lt;/li>
&lt;li>Macros can&amp;rsquo;t be debugged by debugger.&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>PROS&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>Efficiency &amp;ndash; faster than same function call.
&lt;ul>
&lt;li>TIPS: prefer to use C99&amp;rsquo;s &lt;code>inline&lt;/code> , &lt;code>always_inline&lt;/code> keywords&lt;/li>
&lt;/ul>
&lt;/li>
&lt;li>Passing default arguments&lt;/li>
&lt;li>Debug strings
&lt;ul>
&lt;li>&lt;code>__FILE__, __LINE__, __func__, __TIME__, __DATE__, __STDC__, __STDC_VERSION__&lt;/code>&lt;/li>
&lt;/ul>
&lt;/li>
&lt;/ul>
&lt;h2 id="true-constant-variable-in-c">True Constant variable in C&lt;sup>&lt;a class="h__anchor" href="#true-constant-variable-in-c">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>In C, the &lt;code>const&lt;/code> variables are not true constants, so can&amp;rsquo;t use in switch-case
or use them for defined an array&amp;rsquo;s size (C++ can). Enumerations are real consts,
but their type is only integer. So, in dired need to define true constants, just
use macro.&lt;/p>
&lt;h2 id="example-of-macro-usage">Example of Macro Usage&lt;sup>&lt;a class="h__anchor" href="#example-of-macro-usage">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;h3 id="defined-new-macro">Defined New Macro&lt;sup>&lt;a class="h__anchor" href="#defined-new-macro">¶&lt;/a>&lt;/sup>&lt;/h3>
&lt;p>Sometimes test macro existence before define is a good idea.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#ifndef M1
&lt;/span>&lt;span class="cp">#define M1 100
&lt;/span>&lt;span class="cp">#endif
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="brackets-protected">Brackets Protected&lt;sup>&lt;a class="h__anchor" href="#brackets-protected">¶&lt;/a>&lt;/sup>&lt;/h3>
&lt;p>Directly substituted in code will cause some pretty nasty side effects,
because of operator precedence.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define MUX(x) (x*x)
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">MUX&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// incorrect!
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="increment--decrement-operation">Increment / Decrement Operation&lt;sup>&lt;a class="h__anchor" href="#increment--decrement-operation">¶&lt;/a>&lt;/sup>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define ABS(x) ((x)&amp;gt;0?(x):-(x))
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">ABS&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="o">++&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// incorrect!
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="duplicated-function-call">Duplicated Function Call&lt;sup>&lt;a class="h__anchor" href="#duplicated-function-call">¶&lt;/a>&lt;/sup>&lt;/h3>
&lt;p>If pass functions as macro&amp;rsquo;s parameter, may cause duplicated function call.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define MIN(x, y) ((x) &amp;lt; (y) ? (x) : (y))
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">MIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span> &lt;span class="o">+&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">foo&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">z&lt;/span>&lt;span class="p">));&lt;/span> &lt;span class="c1">// incorrect!
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="multiple-line-macros">Multiple Line Macros&lt;sup>&lt;a class="h__anchor" href="#multiple-line-macros">¶&lt;/a>&lt;/sup>&lt;/h3>
&lt;p>Be careful in define multiple line macros. Wrap them in &lt;code>do{}while(0)&lt;/code>&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;span class="lnt">6
&lt;/span>&lt;span class="lnt">7
&lt;/span>&lt;span class="lnt">8
&lt;/span>&lt;span class="lnt">9
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define MIN(x, y) \
&lt;/span>&lt;span class="cp">{ \
&lt;/span>&lt;span class="cp"> if((x) &amp;lt; (y)) \
&lt;/span>&lt;span class="cp"> return x; \
&lt;/span>&lt;span class="cp"> else \
&lt;/span>&lt;span class="cp"> return y; \
&lt;/span>&lt;span class="cp">} &lt;/span>&lt;span class="c1">// &amp;lt;= can&amp;#39;t add semicolon, here.
&lt;/span>&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">MIN&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">y&lt;/span>&lt;span class="p">);&lt;/span> &lt;span class="c1">// incorrect!
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="passing-default-arguments">Passing Default Arguments&lt;sup>&lt;a class="h__anchor" href="#passing-default-arguments">¶&lt;/a>&lt;/sup>&lt;/h3>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kt">void&lt;/span> &lt;span class="nf">fun&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">a2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;span class="cp">#define m_fun_a1(x) fun(x, 2)
&lt;/span>&lt;span class="cp">#define m_fun_a2(x) fun(1, x)
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="variadic-macros">Variadic Macros&lt;sup>&lt;a class="h__anchor" href="#variadic-macros">¶&lt;/a>&lt;/sup>&lt;/h3>
&lt;p>Note this type of macros are GCC standard, and may not supported by other
compiler.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="cp">#define eprintf(format, ...) fprintf(stderr, __VAR_ARGS__)
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h3 id="stringizing-and-concatenation">Stringizing and Concatenation&lt;sup>&lt;a class="h__anchor" href="#stringizing-and-concatenation">¶&lt;/a>&lt;/sup>&lt;/h3>
&lt;p>Use &lt;code>#&lt;/code> to stringizing, use &lt;code>##&lt;/code> concatenation, but do not relay on those
tricks too much.&lt;/p>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt">1
&lt;/span>&lt;span class="lnt">2
&lt;/span>&lt;span class="lnt">3
&lt;/span>&lt;span class="lnt">4
&lt;/span>&lt;span class="lnt">5
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-c" data-lang="c">&lt;span class="kr">inline&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">calc_0&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">*&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="kr">inline&lt;/span> &lt;span class="kt">int&lt;/span> &lt;span class="nf">calc_1&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">a&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">b&lt;/span>&lt;span class="p">){&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">a&lt;/span>&lt;span class="o">/&lt;/span>&lt;span class="n">b&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="p">}&lt;/span>
&lt;span class="cp">#define calc_x(x, a, b) calc_##x(a, b)
&lt;/span>&lt;span class="cp">&lt;/span>&lt;span class="c1">// ...
&lt;/span>&lt;span class="c1">&lt;/span>&lt;span class="n">calc_x&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="mi">0&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="mi">2&lt;/span>&lt;span class="p">);&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="ref">Ref.&lt;sup>&lt;a class="h__anchor" href="#ref">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://pmihaylov.com/macros-in-c/">https://pmihaylov.com/macros-in-c/&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://gnu.org/onlinedocs/cpp/Macro-Arguments.html">http://gnu.org/onlinedocs/cpp/Macro-Arguments.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://gnu.org/onlinedocs/cpp/Macro-Pitfalls.html">http://gnu.org/onlinedocs/cpp/Macro-Pitfalls.html&lt;/a>&lt;/li>
&lt;li>&lt;a href="http://gnu.org/onlinedocs/cpp/Variadic-Macros.html">http://gnu.org/onlinedocs/cpp/Variadic-Macros.html&lt;/a>&lt;/li>
&lt;/ul></article></item><item><title>Git Security Change</title><link>/2021/git-security-change/</link><pubDate>Mon, 14 Jun 2021 13:11:05 CST</pubDate><guid>/2021/git-security-change/</guid><description/><article>&lt;h1 id="reason">Reason&lt;sup>&lt;a class="h__anchor" href="#reason">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>&lt;a class="md__link" href="https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/"
target="_blank" rel="noopener"
>
token-authentication-requirements-for-git-operations
↗
&lt;/a>
&lt;/p>
&lt;h1 id="take-action">Take Action&lt;sup>&lt;a class="h__anchor" href="#take-action">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;h2 id="use-ssh">Use SSH&lt;sup>&lt;a class="h__anchor" href="#use-ssh">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;ol>
&lt;li>Generate Public Key&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>ssh-keygen -t rsa &amp;quot;mypersonal@email.com&amp;quot;
&lt;/code>&lt;/pre>&lt;p>Note: email is optional.&lt;/p>
&lt;ol start="2">
&lt;li>Login in Github&lt;/li>
&lt;/ol>
&lt;p>Settings -&amp;gt; SSH and GPG keys -&amp;gt; New SSH key&lt;/p>
&lt;p>Copy content in &lt;code>~/.ssh/id_rsa.pub&lt;/code>.&lt;/p>
&lt;ol start="3">
&lt;li>Verify&lt;/li>
&lt;/ol>
&lt;pre>&lt;code>ssh -T git@github.com
&lt;/code>&lt;/pre>&lt;p>If corrent verified, will see:&lt;/p>
&lt;pre>&lt;code>Hi xxx! You’ve successfully authenticated, but GitHub does not # provide shell access.
&lt;/code>&lt;/pre>&lt;h2 id="change-remote-url">Change Remote URL&lt;sup>&lt;a class="h__anchor" href="#change-remote-url">¶&lt;/a>&lt;/sup>&lt;/h2>
&lt;p>First verify current remote URL.&lt;/p>
&lt;pre>&lt;code>git remote -v
&lt;/code>&lt;/pre>&lt;p>Then Change remote&amp;rsquo;s URL from HTTPS to SSH.&lt;/p>
&lt;pre>&lt;code>git remote set-url origin git@github.com:user/repository.git
&lt;/code>&lt;/pre></article></item><item><title>About Nagging</title><link>/2021/about-nagging/</link><pubDate>Fri, 21 May 2021 12:36:29 CST</pubDate><guid>/2021/about-nagging/</guid><description/><article>&lt;p>&lt;em>Anonymous reprinting this article due to unknown source.&lt;/em>&lt;/p>
&lt;p>Nagging is the dispiriting, unpleasant, counter-productive but wholly
understandable and poignant version of a hugely noble ambition the desire to
change other people.&lt;/p>
&lt;p>There is so much we might fairly want to change about them.&lt;/p>
&lt;p>We&amp;rsquo;re an entirely imperfect lot and therefore we want other people to be more
self-aware, punctual, generous, reliable, introspective, resilient,
communicative, profound.&lt;/p>
&lt;p>At home, we want them to focus more on the sink, the children, the bins, the
money and the need to put the phone down and look up.&lt;/p>
&lt;p>At a macro-dimension, we want people to think more about the suffering of
encaged animals the destruction of our habitat and the iniquities of
international capitalism.&lt;/p>
&lt;p>&lt;strong>Most of us, very far from our ideal selves.&lt;/strong>&lt;/p>
&lt;p>And at the level of the species, we come close to an evolutionary error.&lt;/p>
&lt;p>The desire to change people is therefore no pathology.&lt;/p>
&lt;p>It&amp;rsquo;s a clear-sighted recognition of the scale of human wickedness.&lt;/p>
&lt;p>Nagging is, in its essence, an attempt at teaching, at getting an idea for
improvement from one mind into another.&lt;/p>
&lt;p>But it&amp;rsquo;s also a version of teaching that has given up hope.&lt;/p>
&lt;p>It has descended into an attempt to insist rather than invite to coerce rather
than charm.&lt;/p>
&lt;p>One is too panicked by the thought of the unteachable student is ruining one&amp;rsquo;s
life to find the inner resources to see it a little more from their point of
view.&lt;/p>
&lt;p>It&amp;rsquo;s one&amp;rsquo;s own suffering that dominates all the available imaginative capacity.&lt;/p>
&lt;p>And so one gets straight to the point, gets rid of garlands, omits the honey
and says it in plain terms.&lt;/p>
&lt;p>&amp;ldquo;The bins nee attention now.&amp;rdquo;&lt;/p>
&lt;p>&amp;ldquo;Get to the table immediately&amp;rdquo;&lt;/p>
&lt;p>&amp;ldquo;You&amp;rsquo;re a selfish layabout.&amp;rdquo;&lt;/p>
&lt;p>&amp;ldquo;Not there, here &amp;hellip;&amp;rdquo;&lt;/p>
&lt;p>One isn&amp;rsquo;t wrong. One is really very right, but also very tired and deep down,
quite sad.&lt;/p>
&lt;p>Lamentably, also, it just doesn&amp;rsquo;t work.&lt;/p>
&lt;p>By the time one start to humiliating the student, the lesson is over.&lt;/p>
&lt;p>Nagging breeds its evil twin, shirking.&lt;/p>
&lt;p>The other pretends to read the paper, goes upstairs and feels righteous.&lt;/p>
&lt;p>The shrillness of one&amp;rsquo;s tone gives them all the excuse they need to trust that
we have nothing kind or true to tell them.&lt;/p>
&lt;p>One changes other people only when the desire that they change has not reached
an insistent pitch, when we can still bear that they remain as they are.&lt;/p>
&lt;p>All of us improve only when we have not been badgered or made to feel guilty,
only when we have a sense that we are loved and deeply understood for the many
reasons why change is so hard for us.&lt;/p>
&lt;p>We know, of course, the bins need our attention, that we should strive to get
to bed earlier and that we have been a disappointment in the couple.&lt;/p>
&lt;p>But we can&amp;rsquo;t to hear these lessons in an unsympathetic tone.&lt;/p>
&lt;p>We want tricky children that we are to be indulged for our ambivalence about
becoming better people.&lt;/p>
&lt;p>The same obtuse dynamic is a play at the political level.&lt;/p>
&lt;p>We know we shouldn&amp;rsquo;t abuse the planet, bend rules or close our hearts to the
unfortunate.&lt;/p>
&lt;p>But we won&amp;rsquo;t do any of the good things if a dour figure wags his finger and
delivers stern lectures.&lt;/p>
&lt;p>We want to be charmed not dragged into goodness.&lt;/p>
&lt;p>The tragedy of nagging is that its causes are usually so noble and yet that it
doesn&amp;rsquo;t work.&lt;/p>
&lt;p>We nag because we feel that our possession of the truth lets us off having to
convey it elegantly.&lt;/p>
&lt;p>It never does.&lt;/p>
&lt;p>The solution to nagging isn&amp;rsquo;t to give up trying to get others to do what we
want.&lt;/p>
&lt;p>Rather, it&amp;rsquo;s to recognise that persuasion always needs to occur in terms that
make sense to those who so badly need to be altered.&lt;/p></article></item><item><title>Fast Cd Keymap in Zsh</title><link>/2021/fast-cd-keymap-in-zsh/</link><pubDate>Sun, 16 May 2021 11:06:47 CST</pubDate><guid>/2021/fast-cd-keymap-in-zsh/</guid><description/><article>&lt;h1 id="fast-cd-keymap-in-zsh">Fast &lt;code>cd&lt;/code> Keymap in Zsh&lt;sup>&lt;a class="h__anchor" href="#fast-cd-keymap-in-zsh">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;p>&lt;strong>TL;DR&lt;/strong>:&lt;/p>
&lt;ol>
&lt;li>paste below code to your &lt;code>.zshrc&lt;/code>&lt;/li>
&lt;li>run &lt;code>source ~/.zshrc&lt;/code>&lt;/li>
&lt;li>now you have two keys&lt;/li>
&lt;/ol>
&lt;ul>
&lt;li>&lt;kbd>Alt&lt;/kbd> + &lt;kbd>k&lt;/kbd>: go upper directory.&lt;/li>
&lt;li>&lt;kbd>Alt&lt;/kbd> + &lt;kbd>j&lt;/kbd>: undo above action.&lt;/li>
&lt;/ul>
&lt;div class="highlight">&lt;div class="chroma">
&lt;table class="lntable">&lt;tr>&lt;td class="lntd">
&lt;pre class="chroma">&lt;code>&lt;span class="lnt"> 1
&lt;/span>&lt;span class="lnt"> 2
&lt;/span>&lt;span class="lnt"> 3
&lt;/span>&lt;span class="lnt"> 4
&lt;/span>&lt;span class="lnt"> 5
&lt;/span>&lt;span class="lnt"> 6
&lt;/span>&lt;span class="lnt"> 7
&lt;/span>&lt;span class="lnt"> 8
&lt;/span>&lt;span class="lnt"> 9
&lt;/span>&lt;span class="lnt">10
&lt;/span>&lt;span class="lnt">11
&lt;/span>&lt;span class="lnt">12
&lt;/span>&lt;span class="lnt">13
&lt;/span>&lt;span class="lnt">14
&lt;/span>&lt;span class="lnt">15
&lt;/span>&lt;span class="lnt">16
&lt;/span>&lt;span class="lnt">17
&lt;/span>&lt;/code>&lt;/pre>&lt;/td>
&lt;td class="lntd">
&lt;pre class="chroma">&lt;code class="language-zsh" data-lang="zsh">dir-stack-push&lt;span class="o">(){&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">DIR_STACKS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="nv">$DIR_STACKS&lt;/span>:&lt;span class="nv">$PWD&lt;/span> &lt;span class="c1"># push current path to CD_STACKS&lt;/span>
&lt;span class="nb">cd&lt;/span> ..
zle reset-prompt &lt;span class="c1"># redraw prompt&lt;/span>
&lt;span class="o">}&lt;/span>
dir-stack-pop&lt;span class="o">(){&lt;/span>
&lt;span class="k">if&lt;/span> &lt;span class="o">[[&lt;/span> -z &lt;span class="si">${&lt;/span>&lt;span class="nv">DIR_STACKS&lt;/span>&lt;span class="p">##*:&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="o">]]&lt;/span>&lt;span class="p">;&lt;/span> &lt;span class="k">then&lt;/span>
&lt;span class="k">return&lt;/span> &lt;span class="c1"># don&amp;#39;t cd to home path&lt;/span>
&lt;span class="k">fi&lt;/span>
&lt;span class="nb">cd&lt;/span> &lt;span class="si">${&lt;/span>&lt;span class="nv">DIR_STACKS&lt;/span>&lt;span class="p">##*:&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># cd last path&lt;/span>
zle reset-prompt &lt;span class="c1"># redraw prompt&lt;/span>
&lt;span class="nb">export&lt;/span> &lt;span class="nv">DIR_STACKS&lt;/span>&lt;span class="o">=&lt;/span>&lt;span class="si">${&lt;/span>&lt;span class="nv">DIR_STACKS&lt;/span>&lt;span class="p">%:*&lt;/span>&lt;span class="si">}&lt;/span> &lt;span class="c1"># remove last path&lt;/span>
&lt;span class="o">}&lt;/span>
zle -N dir-stack-push
zle -N dir-stack-pop
bindkey &lt;span class="s1">&amp;#39;^[k&amp;#39;&lt;/span> dir-stack-push &lt;span class="c1"># [Alt + k]&lt;/span>
bindkey &lt;span class="s1">&amp;#39;^[j&amp;#39;&lt;/span> dir-stack-pop &lt;span class="c1"># [Alt + j]&lt;/span>
&lt;/code>&lt;/pre>&lt;/td>&lt;/tr>&lt;/table>
&lt;/div>
&lt;/div>&lt;h1 id="ref">Ref&lt;sup>&lt;a class="h__anchor" href="#ref">¶&lt;/a>&lt;/sup>&lt;/h1>
&lt;ul>
&lt;li>&lt;a href="https://devhints.io/bash">https://devhints.io/bash&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://unix.stackexchange.com/questions/79897/how-can-i-use-bindkey-to-run-a-script">https://unix.stackexchange.com/questions/79897/how-can-i-use-bindkey-to-run-a-script&lt;/a>&lt;/li>
&lt;li>&lt;a href="https://stackoverflow.com/questions/52325626/zsh-refresh-prompt-after-running-zle-widget">https://stackoverflow.com/questions/52325626/zsh-refresh-prompt-after-running-zle-widget&lt;/a>&lt;/li>
&lt;/ul></article></item></channel></rss>